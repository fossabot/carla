name: "CodeQL with AWS Runner"

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v1.0.2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ secrets.GHAS_AMI }}
          ec2-instance-type: t2.xlarge
          subnet-id: subnet-9e956ae4
          security-group-id: sg-0edf281d6de9e7b66
  do-the-job:
    name: Analyze code on the runner
    
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    needs: start-runner # required to start the main job when the runner is ready
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]

    steps:
      - name: Where are we in the self-hosted runner?
        run: |
          echo 'Hello World!'
          echo "list"
          ls -l
          echo "Working directory"
          pwd

      - name: Checkout repository
        uses: actions/checkout@v2

      - if: matrix.language == 'cpp' 
        name: Fetch UE Repo
        uses: actions/checkout@v2
        with:
          repository: EpicGames/UnrealEngine
          token: ${{ secrets.UE_AUTH_TOKEN }}
          fetch-depth: 1
          ref: 4.24
          path: UnrealEngine_4.24

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}

      # Make sure to meet the minimum requirements
      # Read the complete documentation to understand each step
      - if: matrix.language == 'cpp'  
        run: |
          # Install dependencies
          echo 'Install dependencies'
          sudo apt-get update &&
          sudo apt-get install wget software-properties-common &&
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test &&
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add - &&
          sudo apt-add-repository "deb http://apt.llvm.org/$(lsb_release -c --short)/ llvm-toolchain-$(lsb_release -c --short)-8 main" &&
          sudo apt-get update
          
          # Additional dependencies for Ubuntu 18.04
          echo 'Install dependencies 18.04'
          sudo apt-get install build-essential clang-8 lld-8 g++-7 cmake ninja-build libvulkan1 python python-pip python-dev python3-dev python3-pip libpng-dev libtiff5-dev libjpeg-dev tzdata sed curl unzip autoconf libtool rsync libxml2-dev &&
          pip2 install --user setuptools &&
          pip3 install --user -Iv setuptools==47.3.1
          
          # Change default clang version
          echo 'Install clang version'
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-8/bin/clang++ 180 &&
          sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-8/bin/clang 180
          
          # goto Unreal Engine 4.24
          echo "Unreal Engine 4.24 chown/cd"
          whoami
          ls -l
          pwd
          chown ubuntu:ubuntu /actions-runner/_work/carla/carla/UnrealEngine_4.24/
          chown -R ubuntu:ubuntu UnrealEngine_4.24
          ls -l
          whoami
          su ubuntu
          whoami
          cd UnrealEngine_4.24
          ls -l
          pwd
          
          # Download and install the UE patches
          # echo 'Install UE patches'
          wget https://carla-releases.s3.eu-west-3.amazonaws.com/Backup/UE4_patch_vulkan.patch
          wget https://carla-releases.s3.eu-west-3.amazonaws.com/Backup/UE4_patch_wheels.patch
          git apply UE4_patch_vulkan.patch UE4_patch_wheels.patch
          
          # Build UE
          # echo 'Build UE setup'
          # ./Setup.sh 
          # echo 'generate project file'
          # ./GenerateProjectFiles.sh
          # echo 'Make UE'
          # su â€“c make ubuntu
          
          # Open the UE Editor to check everything works properly
          # cd ~/UnrealEngine_4.24/Engine/Binaries/Linux && ./UE4Editor
          
          # Get the CARLA assets
          cd ~/actions-runner/_work/carla/carla
          ./Update.sh
          
          # Set the environment variable
          export UE4_ROOT=~/UnrealEngine_4.24
          
          # make the CARLA client and the CARLA server
          echo "make the CARLA client and the CARLA server"
          make PythonAPI
          make launch
          
          # Press play in the Editor to initialize the server
          # Run example scripts to test CARLA
          
          # Terminal A 
          # cd PythonAPI/examples
          # python3 spawn_npc.py 
          
          # Terminal B
          # cd PythonAPI/examples
          # python3 spawn_npc.py
          # python3 dynamic_weather.py
          
          # Optionally, to compile the PythonAPI for Python2, run the following command in the root CARLA directory
          # make PythonAPI ARGS="--python-version=2"

      # - name: Autobuild
      # uses: github/codeql-action/autobuild@v1
      - name: Where are we in the self-hosted runner now?
        run: |
          echo 'Hello World!'
          echo "list"
          ls -l
          echo "Working directory"
          pwd
          echo "Change directory"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  stop-runner:
    name: Stop self-hosted EC2 runner
    runs-on: ubuntu-latest
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v1.0.2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
